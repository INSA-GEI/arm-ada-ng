/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/mainscreen_screen/MainScreenViewBase.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/Color.hpp>

MainScreenViewBase::MainScreenViewBase() :
    buttonCallback(this, &MainScreenViewBase::buttonCallbackHandler)
{

    ImageBackground.setXY(0, -1);
    ImageBackground.setBitmap(touchgfx::Bitmap(BITMAP_DARK_BACKGROUNDS_MAIN_BG_TEXTURE_480X272PX_ID));

    imageBorder.setXY(0, 242);
    imageBorder.setBitmap(touchgfx::Bitmap(BITMAP_BORDER_ID));
    imageBorder.setAlpha(170);

    textDateTime.setXY(216, 248);
    textDateTime.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textDateTime.setLinespacing(0);
    textDateTime.setRotation(touchgfx::TEXT_ROTATE_180);
    Unicode::snprintf(textDateTimeBuffer, TEXTDATETIME_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID3).getText());
    textDateTime.setWildcard(textDateTimeBuffer);
    textDateTime.resizeToCurrentText();
    textDateTime.setTypedText(touchgfx::TypedText(T_SINGLEUSEID2));

    buttonMenu.setXY(8, 242);
    buttonMenu.setBitmaps(touchgfx::Bitmap(BITMAP_MENU_ICON_ID), touchgfx::Bitmap(BITMAP_MENU_ICON_ID));
    buttonMenu.setAction(buttonCallback);

    textMsg.setPosition(0, 0, 480, 20);
    textMsg.setVisible(false);
    textMsg.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    textMsg.setLinespacing(0);
    textMsg.setRotation(touchgfx::TEXT_ROTATE_180);
    Unicode::snprintf(textMsgBuffer, TEXTMSG_SIZE, "%s", touchgfx::TypedText(T_SINGLEUSEID7).getText());
    textMsg.setWildcard(textMsgBuffer);
    textMsg.setTypedText(touchgfx::TypedText(T_SINGLEUSEID6));

    buttonSDCard.setXY(48, 245);
    buttonSDCard.setBitmaps(touchgfx::Bitmap(BITMAP_SD_ICON_TINY_ID), touchgfx::Bitmap(BITMAP_SD_ICON_TINY_ID));
    buttonSDCard.setAction(buttonCallback);

    modalWindow.setBackground(touchgfx::BitmapId(BITMAP_DARK_BACKGROUNDS_MAIN_BG_320X240PX_ID), 80, 16);
    modalWindow.setShadeColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    modalWindow.setShadeAlpha(126);
    modalWindow.hide();

    textModal.setXY(54, 159);
    textModal.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    textModal.setLinespacing(0);
    textModal.setRotation(touchgfx::TEXT_ROTATE_180);
    textModal.setTypedText(touchgfx::TypedText(T_SINGLEUSEID10));
    modalWindow.add(textModal);

    buttonModal.setXY(75, 36);
    buttonModal.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    buttonModal.setLabelText(touchgfx::TypedText(T_SINGLEUSEID9));
    buttonModal.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    buttonModal.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    buttonModal.setLabelRotation(TEXT_ROTATE_180);
    buttonModal.setAction(buttonCallback);
    modalWindow.add(buttonModal);


    add(ImageBackground);
    add(imageBorder);
    add(textDateTime);
    add(buttonMenu);
    add(textMsg);
    add(buttonSDCard);
    add(modalWindow);

}

void MainScreenViewBase::setupScreen()
{

}

//Handles when a key is pressed
void MainScreenViewBase::handleKeyEvent(uint8_t key)
{
    if(0 == key)
    {
        //InteractionChangeScreenTests
        //When hardware button 0 clicked change screen to Tests
        //Go to Tests with screen transition towards East
        application().gotoTestsScreenCoverTransitionEast();
    }
}

//Called when the screen is done with transition/load
void MainScreenViewBase::afterTransition()
{
    //InteractionUpdateScreen
    //When screen is entered call virtual function
    //Call updateScreen
    updateScreen();
}

void MainScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &buttonMenu)
    {
        //InteractionButtonMenu
        //When buttonMenu clicked show modalWindow
        //Show modalWindow
        modalWindow.setVisible(true);
        modalWindow.invalidate();
    }
    else if (&src == &buttonSDCard)
    {
        //InteractionButtonSDCard
        //When buttonSDCard clicked show modalWindow
        //Show modalWindow
        modalWindow.setVisible(true);
        modalWindow.invalidate();
    }
    else if (&src == &buttonModal)
    {
        //InteractionButtonModal
        //When buttonModal clicked hide modalWindow
        //Hide modalWindow
        modalWindow.setVisible(false);
        modalWindow.invalidate();
    }
}
